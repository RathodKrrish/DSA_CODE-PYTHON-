# this is implemented from the chaining technique.
class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [[] for _ in range(self.size)]  # Initialize buckets

    def _hash_function(self, key):
        # Simple hash: sum of character codes % table size
        return sum(ord(char) for char in str(key)) % self.size

    def insert(self, key, value):
        index = self._hash_function(key)
        bucket = self.table[index]

        # Check if key already exists
        for i, (k, v) in enumerate(bucket):
            if k == key:
                bucket[i] = (key, value)  # Update value
                print(f"Updated key '{key}' at index {index}")
                return

        # If key not found, append new key-value pair
        bucket.append((key, value))
        print(f"Inserted key '{key}' at index {index}")

    def get(self, key):
        index = self._hash_function(key)
        bucket = self.table[index]

        for k, v in bucket:
            if k == key:
                return v
        return None  # Key not found

    def delete(self, key):
        index = self._hash_function(key)
        bucket = self.table[index]

        for i, (k, v) in enumerate(bucket):
            if k == key:
                del bucket[i]
                print(f"Deleted key '{key}' from index {index}")
                return
        print(f"Key '{key}' not found!")

    def display(self):
        print("\nHash Table Contents:")
        for i, bucket in enumerate(self.table):
            print(f"Index {i}: {bucket}")



if __name__ == "__main__":
    h = HashTable(10)  # Create hash table of size 10

    h.insert("apple", 100)
    h.insert("banana", 200)
    h.insert("grapes", 300)

    print("\nValue for 'apple':", h.get("apple"))

    h.display()

    h.insert("apple", 150)  # Update

    h.delete("banana")
    h.delete("orange")  # Key not present

    h.display()
 

# ркЪрк▓рлЛ, ркЖрккркгрлЗ рк╣рк╛рк╢ рклркВркХрлНрк╢рки (_hash_function) ркирлЗ ркЧрлБркЬрк░рк╛ркдрлА ркнрк╛рк╖рк╛ркорк╛ркВ рк╡рк┐ркЧркдрк╡рк╛рк░ рк╕ркоркЬрлАркпрлЗ, рк╕рк╛ркерлЗ рк╕рк╛ркерлЗ ркЙркжрк╛рк╣рк░ркг рк╕рк╛ркерлЗ values рккркг рк▓ркИркП.

# ---

# ## ЁЯФН рк╣рлЗрк╢ рклркВркХрлНрк╢рки рк╢рлБркВ ркЫрлЗ?

# рк╣рлЗрк╢ рклркВркХрлНрк╢рки ркП ркХрлЛркИ рккркг тАЬkeyтАЭ (ркЬрлЗ рк╕рк╛ркорк╛ркирлНркп рк░рлАркдрлЗ string рк╣рлЛркп ркЫрлЗ ркЬрлЗрко ркХрлЗ "apple") ркирлЗ ркПркХ ркиркВркмрк░ (index) ркорк╛ркВ ркмркжрк▓рлЗ ркЫрлЗ. ркЖ ркиркВркмрк░ тАЬрк╣рлЗрк╢ ркЯрлЗркмрк▓тАЭ (Hash Table) ркирлА рк▓ркВркмрк╛ркИркирлА ркЕркВркжрк░ рк╣рлЛркп ркЫрлЗ. ркЖ index ркмркдрк╛рк╡рлЗ ркЫрлЗ ркХрлЗ ркЖрккркгрлЗ value ркирлЗ Hash Table ркирк╛ ркХркпрк╛ рк╕рлНркерк╛рки (slot) ркорк╛ркВ рк░рк╛ркЦрк╡рлА.

# ---

# ### ЁЯУМ ркЖ рклркВркХрлНрк╢рки ркЫрлЗ:

# ```python
# def _hash_function(self, key):
#     return sum(ord(char) for char in str(key)) % self.size
# ```

# ркЪрк╛рк▓рлЛ ркдрлЗркирлЗ ркнрк╛ркЧрлЗ ркнрк╛ркЧрлЗ рк╕ркоркЬрлАркП:

# ---

# ### ЁЯзо Step-by-Step рк╕ркоркЬрлВркдрлА:

# 1. **`ord(char)`**:
#    - ркжрк░рлЗркХ character ркирлЛ ASCII number ркЖрккрлЗ ркЫрлЗ.
#    - ркЙркжрк╛рк╣рк░ркг:
#      - `'a'` = 97
#      - `'p'` = 112
#      - `'l'` = 108
#      - `'e'` = 101

# 2. **`sum(ord(char) for char in str(key))`**:
#    - ркжрк░рлЗркХ character ркирк╛ ASCII values ркирлЛ ркЬркорк╛рк╡ (sum) ркХрк░рлЗ ркЫрлЗ.

# 3. **`% self.size`**:
#    - рк╣рлЗрк╢ ркЯрлЗркмрк▓ркирлА рк╕рк╛ркЗркЭркирк╛ ркЖркзрк╛рк░рлЗ ркдрлЗркирлЗ Modulo ркХрк░рк╡рлБркВ (ркмрк╛ркХрлАрднрд╛рдЧ рк▓рк╛рк╡рк╡рлЛ) ркЬрлЗркерлА ркдрлЗ ркХрлЛркИ рккркг ркорк╛ркирлНркп index (0 ркерлА size-1 рк╡ркЪрлНркЪрлЗ) ркЖрккрлЗ.

# ---

# ## ЁЯзк ркЙркжрк╛рк╣рк░ркг рк╕рк╛ркерлЗ рк╕ркоркЬрк╛рк╡рлБркВ:

# ркЪрк╛рк▓рлЛ key ркдрк░рлАркХрлЗ `"apple"` рк▓ркИркП ркЕркирлЗ Hash Table ркирлБркВ size = 10 рк▓ркИркП:

# ```python
# key = "apple"
# size = 10
# ```

# 1. `"apple"` ркирк╛ characters: `'a', 'p', 'p', 'l', 'e'`
# 2. ASCII values:
#    - `a` = 97
#    - `p` = 112
#    - `p` = 112
#    - `l` = 108
#    - `e` = 101

# 3. Sum = 97 + 112 + 112 + 108 + 101 = **530**

# 4. Hash Index = 530 % 10 = **0**

# ЁЯУН ркПркЯрк▓рлЗ ркХрлЗ `"apple"` ркирлБркВ value Hash Table ркирк╛ **index 0** рккрк░ stored ркерк╢рлЗ.

# ---

# ### ркмрлАркЬрлБркВ ркЙркжрк╛рк╣рк░ркг: `"banana"`

# Characters = `b, a, n, a, n, a`  
# ASCII = 98 + 97 + 110 + 97 + 110 + 97 = **609**  
# Hash Index = 609 % 10 = **9**

# ЁЯУН `"banana"` ркирлБркВ value **index 9** рккрк░ ркЬрк╢рлЗ.

# ---

# ## тЬЕ рклрк╛ркЗркирк▓ рк░рлАркдрлЗ ркХрк╣рлАркП ркдрлЛ...

# ```python
# return sum(ord(char) for char in str(key)) % self.size
# ```

# ркПрк╡рлБркВ ркХрк╣рлЗ ркЫрлЗ ркХрлЗ:
# - ркжрк░рлЗркХ letter ркирк╛ number ркорлЗрк│рк╡
# - ркмркзрк╛ркирлБркВ total рк▓
# - Hash Table ркирк╛ ркХркжркерлА modulo рк▓ркИ, ркдрлЗ index ркЖрккрлА ркжрлЗ

# ---

# ркдркорлЗ ркоркирлЗ ркХрк╣рлЛ ркХрлЗ рк╣рк╡рлЗ:
# - ркдркоркирлЗ linear probing/open addressing рк╢рлАркЦрк╡рлБркВ ркЫрлЗ?
# - ркХрлЗ ркдркорлЗ ркЖркЬ hash function ркирлЗ ркЕрк▓ркЧ рк░рлАркдрлЗ рк▓ркЦрк╡рк╛ркирлБркВ рк╢рлАркЦрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?
# - ркХрлЗ ркдркорлЗ ркдркорк╛рк░рк╛ project ркорк╛ркВ Hash Table рк╡рк╛рккрк░рк╡рлБркВ рк╢рлАркЦрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?

# ркдркорк╛рк░рлБркВ goal ркЬркгрк╛рк╡рлЛ, ркорлЗркВ ркЖркЧрк│ркирлБркВ ркЖркЧрк│ рк▓ркИ ркЬркИрк╢ ЁЯЩВ